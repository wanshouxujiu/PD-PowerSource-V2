<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\F103.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\F103.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Oct 28 16:19:49 2024
<BR><P>
<H3>Maximum Stack Usage =        240 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Detection_InPut_Voltage &rArr; InPut_Voltage_Filter &rArr; ADC1_Get_Channel_7_Voltaged &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[40]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[39]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[52]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">EXTI4_IRQHandler</a> from stm32f10x_it.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[41]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[49]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3]">MenuShow_Power</a> from keyinputfsm.o(i.MenuShow_Power) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[0]">MenuShow_Versions</a> from keyinputfsm.o(i.MenuShow_Versions) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[2]">MenuShow_Vol</a> from keyinputfsm.o(i.MenuShow_Vol) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[1]">MenuShow_Wait</a> from keyinputfsm.o(i.MenuShow_Wait) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[21]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c]">Node_Add</a> from keyinputfsm.o(i.Node_Add) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[a]">Node_Change_Vol_Or_Cur</a> from keyinputfsm.o(i.Node_Change_Vol_Or_Cur) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[14]">Node_EnterMenu</a> from keyinputfsm.o(i.Node_EnterMenu) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[f]">Node_EnterPredefined</a> from keyinputfsm.o(i.Node_EnterPredefined) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[6]">Node_EnterSetting</a> from keyinputfsm.o(i.Node_EnterSetting) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[1b]">Node_EnterShutDowm_Mode</a> from keyinputfsm.o(i.Node_EnterShutDowm_Mode) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[8]">Node_LeftMove</a> from keyinputfsm.o(i.Node_LeftMove) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[1a]">Node_MenuOption_Add</a> from keyinputfsm.o(i.Node_MenuOption_Add) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[16]">Node_MenuOption_Left</a> from keyinputfsm.o(i.Node_MenuOption_Left) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[17]">Node_MenuOption_Right</a> from keyinputfsm.o(i.Node_MenuOption_Right) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[19]">Node_MenuOption_Subtract</a> from keyinputfsm.o(i.Node_MenuOption_Subtract) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[18]">Node_MenuTimeOut</a> from keyinputfsm.o(i.Node_MenuTimeOut) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[e]">Node_ON_OFF_OutPut</a> from keyinputfsm.o(i.Node_ON_OFF_OutPut) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[13]">Node_PredefinedTimeOut</a> from keyinputfsm.o(i.Node_PredefinedTimeOut) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[12]">Node_Predefined_Add</a> from keyinputfsm.o(i.Node_Predefined_Add) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[11]">Node_Predefined_Subtract</a> from keyinputfsm.o(i.Node_Predefined_Subtract) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[1e]">Node_QuitExtinguish_Mode</a> from keyinputfsm.o(i.Node_QuitExtinguish_Mode) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[15]">Node_QuitMenu</a> from keyinputfsm.o(i.Node_QuitMenu) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[10]">Node_QuitPredefined</a> from keyinputfsm.o(i.Node_QuitPredefined) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[1f]">Node_QuitPredefined_NoSet</a> from keyinputfsm.o(i.Node_QuitPredefined_NoSet) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[7]">Node_QuitSetting</a> from keyinputfsm.o(i.Node_QuitSetting) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[1c]">Node_QuitShutDowm_Mode</a> from keyinputfsm.o(i.Node_QuitShutDowm_Mode) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[5]">Node_Ready</a> from keyinputfsm.o(i.Node_Ready) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[9]">Node_RightMove</a> from keyinputfsm.o(i.Node_RightMove) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[1d]">Node_RunningTimeOut</a> from keyinputfsm.o(i.Node_RunningTimeOut) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[d]">Node_SettingTimeOut</a> from keyinputfsm.o(i.Node_SettingTimeOut) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[b]">Node_Subtract</a> from keyinputfsm.o(i.Node_Subtract) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[4]">Node_Void</a> from keyinputfsm.o(i.Node_Void) referenced 2 times from keyinputfsm.o(.data)
 <LI><a href="#[2b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[53]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[56]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[2c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[42]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[45]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[44]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[43]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[46]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[47]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[48]">TIM4_IRQHandler</a> from stm32f10x_it.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4f]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[50]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[51]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[54]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[57]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[58]">fputc</a> from bsp_usart.o(i.fputc) referenced from printf1.o(i.__0printf$1)
 <LI><a href="#[55]">main</a> from mian.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[57]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[12a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[59]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[70]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[12b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[12c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[12d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[12e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[12f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[20]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Voltage
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage_Slow
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InPut_Voltage_Filter
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Current
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_InPut_Voltage
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Voltage
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_InPut_Voltage
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Current
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowProgressBar
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage_Slow
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Current
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Voltage
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Current
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowProgressBar
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage_Slow
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Current
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InPut_Voltage_Filter
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage_Slow
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage_Slow
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Get_Channel_7_Voltaged
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage_Slow
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_InPut_Voltage
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowProgressBar
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage_Slow
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Current
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Filter
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Filter
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Get_Channel_7_Voltaged
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Voltage
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_InPut_Voltage
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Current
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowProgressBar
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage_Slow
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax_Current
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Current
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Power
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage_Slow
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage_Slow
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Get_Channel_7_Voltaged
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Get_Channel_7_Voltaged
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_MaxPower
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Add
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_InPut_Voltage
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_InPut_Voltage
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bubble_sort
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[132]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[133]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[134]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[5c]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[65]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[64]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[5a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[136]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>ADC1_Get_Channel_7_Voltaged</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bsp_adc.o(i.ADC1_Get_Channel_7_Voltaged))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ADC1_Get_Channel_7_Voltaged &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InPut_Voltage_Filter
</UL>

<P><STRONG><a name="[123]"></a>ADC1_Get_Channel_8_Val</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_adc.o(i.ADC1_Get_Channel_8_Val))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Filter
</UL>

<P><STRONG><a name="[98]"></a>ADC1_Get_Channel_9_Val</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_adc.o(i.ADC1_Get_Channel_9_Val))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Circuit_Detection
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Filter
</UL>

<P><STRONG><a name="[81]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Mode_Config
</UL>

<P><STRONG><a name="[80]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Mode_Config
</UL>

<P><STRONG><a name="[83]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Mode_Config
</UL>

<P><STRONG><a name="[7d]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Mode_Config
</UL>

<P><STRONG><a name="[7f]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Mode_Config
</UL>

<P><STRONG><a name="[84]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Mode_Config
</UL>

<P><STRONG><a name="[82]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Mode_Config
</UL>

<P><STRONG><a name="[73]"></a>ADC_x_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_adc.o(i.ADC_x_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC_x_Init &rArr; ADCx_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_DMA_Config
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Mode_Config
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>ADCx_DMA_Config</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, bsp_adc.o(i.ADCx_DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADCx_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_x_Init
</UL>

<P><STRONG><a name="[24]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>Check_Power</STRONG> (Thumb, 364 bytes, Stack size 8 bytes, keyinputfsm.o(i.Check_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Check_Power
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Add
</UL>

<P><STRONG><a name="[91]"></a>Check_Setting</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, task.o(i.Check_Setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Check_Setting &rArr; Set_Vol_UpperLimit &rArr; SC8701_Set_Voltage &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Vol_UpperLimit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Power_UpperLimit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SettingField
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>Check_TimeOut</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, keyinputfsm.o(i.Check_TimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Check_TimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputFSM_SetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputFSM_Run
</UL>

<P><STRONG><a name="[97]"></a>Current_Filter</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, task.o(i.Current_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Current_Filter &rArr; bubble_sort_integer
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bubble_sort_integer
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Get_Channel_9_Val
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Current
</UL>

<P><STRONG><a name="[7a]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_DMA_Config
</UL>

<P><STRONG><a name="[78]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_DMA_Config
</UL>

<P><STRONG><a name="[79]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_DMA_Config
</UL>

<P><STRONG><a name="[27]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>Delay_ms</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, delay.o(i.Delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_logo
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Circuit_Detection
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_InPut_Voltage
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Vol_UpperLimit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIQ02FVS3_Key_Scan
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InPut_Voltage_Filter
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SettingField
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitShutDowm_Mode
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_EnterShutDowm_Mode
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Subtract
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitPredefined
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_ON_OFF_OutPut
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_EnterMenu
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Add
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Vol
</UL>

<P><STRONG><a name="[c8]"></a>Delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, delay.o(i.Delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WaitEepromStandbyState
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
</UL>

<P><STRONG><a name="[9a]"></a>Detection_Current</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, task.o(i.Detection_Current))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Detection_Current &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_State
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Filter
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Circuit_Detection
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSupply_Runing
</UL>

<P><STRONG><a name="[9f]"></a>Detection_InPut_Voltage</STRONG> (Thumb, 562 bytes, Stack size 32 bytes, task.o(i.Detection_InPut_Voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Detection_InPut_Voltage &rArr; InPut_Voltage_Filter &rArr; ADC1_Get_Channel_7_Voltaged &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_GetFlag
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_CleanFlag
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_MaxPower
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Reserve_VolAndCur
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InPut_Voltage_Filter
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>Detection_Power</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, task.o(i.Detection_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Detection_Power &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_State
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSupply_Runing
</UL>

<P><STRONG><a name="[ad]"></a>Detection_Voltage</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, task.o(i.Detection_Voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Detection_Voltage &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_CE_Read
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_VolRestrict
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Filter
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_State
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSupply_Runing
</UL>

<P><STRONG><a name="[b1]"></a>EE_Ergodic_Save</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, task.o(i.EE_Ergodic_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EE_Ergodic_Save &rArr; I2C_EE_BufferWrite &rArr; I2C_EE_PageWrite &rArr; I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWrite
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Reserve_VolAndCur
</UL>

<P><STRONG><a name="[34]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputFSM_SetEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIQ02FVS3_EXTI_Config
</UL>

<P><STRONG><a name="[b7]"></a>GENERAL_TIM_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_generaltim.o(i.GENERAL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GENERAL_TIM_Init &rArr; GENERAL_TIM_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_NVIC_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Mode_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIQ02FVS3_EXTI_Config
</UL>

<P><STRONG><a name="[7c]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GPIO_Config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIQ02FVS3_KEY_GPIO_Config
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_GPIO_Config
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_GPIO_Config
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_GPIO_Config
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Init
</UL>

<P><STRONG><a name="[b5]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage_Slow
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIQ02FVS3_Key_Scan
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadOutputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_FB_Read
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_CE_Read
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_ON_OFF_OutPut
</UL>

<P><STRONG><a name="[106]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_GPIO_Config
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_FB_Control
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_CE_Control
</UL>

<P><STRONG><a name="[105]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_GPIO_Config
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_FB_Control
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_CE_Control
</UL>

<P><STRONG><a name="[ff]"></a>Get_PDPowerSupplyState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, keyinputfsm.o(i.Get_PDPowerSupplyState))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Circuit_Detection
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSupply_Runing
</UL>

<P><STRONG><a name="[af]"></a>Get_VolRestrict</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, keyinputfsm.o(i.Get_VolRestrict))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Voltage
</UL>

<P><STRONG><a name="[22]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_AcknowledgeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
</UL>

<P><STRONG><a name="[c2]"></a>I2C_CheckEvent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f10x_i2c.o(i.I2C_CheckEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
</UL>

<P><STRONG><a name="[cd]"></a>I2C_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WaitEepromStandbyState
</UL>

<P><STRONG><a name="[c4]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Init
</UL>

<P><STRONG><a name="[b2]"></a>I2C_EE_BufferRead</STRONG> (Thumb, 424 bytes, Stack size 16 bytes, bsp_i2c_ee.o(i.I2C_EE_BufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_EE_BufferRead &rArr; I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TIMEOUT_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_VolRestrict_FromRom
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SettingField
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CurRestrict_FromRom
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Reserve_VolAndCur
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Ergodic_Save
</UL>

<P><STRONG><a name="[b3]"></a>I2C_EE_BufferWrite</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, bsp_i2c_ee.o(i.I2C_EE_BufferWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_EE_BufferWrite &rArr; I2C_EE_PageWrite &rArr; I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WaitEepromStandbyState
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_VolRestrict_ToRom
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_CurRestrict_ToRom
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Reserve_VolAndCur
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Ergodic_Save
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SettingField
</UL>

<P><STRONG><a name="[129]"></a>I2C_EE_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_i2c_ee.o(i.I2C_EE_Init))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>I2C_EE_PageWrite</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, bsp_i2c_ee.o(i.I2C_EE_PageWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_EE_PageWrite &rArr; I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TIMEOUT_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWrite
</UL>

<P><STRONG><a name="[cb]"></a>I2C_EE_WaitEepromStandbyState</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, bsp_i2c_ee.o(i.I2C_EE_WaitEepromStandbyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_EE_WaitEepromStandbyState &rArr; I2C_ReadRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadRegister
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearFlag
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWrite
</UL>

<P><STRONG><a name="[c1]"></a>I2C_GenerateSTART</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_GenerateSTART))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WaitEepromStandbyState
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
</UL>

<P><STRONG><a name="[c7]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WaitEepromStandbyState
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
</UL>

<P><STRONG><a name="[c0]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_i2c.o(i.I2C_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
</UL>

<P><STRONG><a name="[ce]"></a>I2C_Init</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, stm32f10x_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Init
</UL>

<P><STRONG><a name="[cc]"></a>I2C_ReadRegister</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_i2c.o(i.I2C_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WaitEepromStandbyState
</UL>

<P><STRONG><a name="[c9]"></a>I2C_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
</UL>

<P><STRONG><a name="[c3]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_Send7bitAddress))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WaitEepromStandbyState
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
</UL>

<P><STRONG><a name="[c5]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
</UL>

<P><STRONG><a name="[a4]"></a>IWDG_CleanFlag</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_iwdg.o(i.IWDG_CleanFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IWDG_CleanFlag &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_InPut_Voltage
</UL>

<P><STRONG><a name="[d4]"></a>IWDG_Config</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_iwdg.o(i.IWDG_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IWDG_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[d9]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[a5]"></a>IWDG_Feed</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_iwdg.o(i.IWDG_Feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_Feed
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_logo
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_InPut_Voltage
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSupply_ShutDown
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSupply_Runing
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSupply_Extinguish
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage_Slow
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Circuit_Protection
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Vol
</UL>

<P><STRONG><a name="[a3]"></a>IWDG_GetFlag</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_iwdg.o(i.IWDG_GetFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IWDG_GetFlag &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_logo
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_InPut_Voltage
</UL>

<P><STRONG><a name="[da]"></a>IWDG_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_iwdg.o(i.IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IWDG_Init &rArr; IWDG_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[d6]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[d7]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[d5]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[a6]"></a>InPut_Voltage_Filter</STRONG> (Thumb, 84 bytes, Stack size 96 bytes, task.o(i.InPut_Voltage_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = InPut_Voltage_Filter &rArr; ADC1_Get_Channel_7_Voltaged &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bubble_sort
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Get_Channel_7_Voltaged
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_InPut_Voltage
</UL>

<P><STRONG><a name="[dc]"></a>KEY_GPIO_Config</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_key.o(i.KEY_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>KeyInputFSM_Run</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, keyinputfsm.o(i.KeyInputFSM_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = KeyInputFSM_Run &rArr; Check_TimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputFSM_SetEvent
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_TimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSupply_ShutDown
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSupply_Runing
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSupply_Extinguish
</UL>

<P><STRONG><a name="[96]"></a>KeyInputFSM_SetEvent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, keyinputfsm.o(i.KeyInputFSM_SetEvent))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput_Detection
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputFSM_Run
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_TimeOut
</UL>

<P><STRONG><a name="[ef]"></a>KeyInputFSM_SetStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, keyinputfsm.o(i.KeyInputFSM_SetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitShutDowm_Mode
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitExtinguish_Mode
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_EnterShutDowm_Mode
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_RunningTimeOut
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Ready
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitSetting
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitPredefined_NoSet
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitPredefined
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitMenu
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_PredefinedTimeOut
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_MenuTimeOut
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_EnterSetting
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_EnterPredefined
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_EnterMenu
</UL>

<P><STRONG><a name="[de]"></a>KeyInput_Detection</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, task.o(i.KeyInput_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = KeyInput_Detection &rArr; Key_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIQ02FVS3_Key_Scan
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputFSM_SetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSupply_ShutDown
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSupply_Runing
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSupply_Extinguish
</UL>

<P><STRONG><a name="[df]"></a>Key_Scan</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, bsp_key.o(i.Key_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Key_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput_Detection
</UL>

<P><STRONG><a name="[23]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIQ02FVS3_NVIC_Config
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_NVIC_Config
</UL>

<P><STRONG><a name="[bd]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIQ02FVS3_NVIC_Config
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_NVIC_Config
</UL>

<P><STRONG><a name="[1b]"></a>Node_EnterShutDowm_Mode</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_EnterShutDowm_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Node_EnterShutDowm_Mode &rArr; OLED_ShowBMP &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_CE_Control
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowBMP
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clock_Control
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputFSM_SetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>Node_QuitExtinguish_Mode</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_QuitExtinguish_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Node_QuitExtinguish_Mode &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clock_Control
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputFSM_SetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>Node_QuitShutDowm_Mode</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_QuitShutDowm_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Node_QuitShutDowm_Mode &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowBMP
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clock_Control
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputFSM_SetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[a0]"></a>OLED_Clear</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_oled.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OLED_Clear &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_InPut_Voltage
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Short_Circuit
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitShutDowm_Mode
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_EnterShutDowm_Mode
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_RunningTimeOut
</UL>

<P><STRONG><a name="[f2]"></a>OLED_Clock_Control</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_oled.o(i.OLED_Clock_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_Clock_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Circuit_Detection
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitShutDowm_Mode
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitExtinguish_Mode
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_EnterShutDowm_Mode
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_RunningTimeOut
</UL>

<P><STRONG><a name="[f6]"></a>OLED_I2C_Init</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, bsp_oled.o(i.OLED_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = OLED_I2C_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[f7]"></a>OLED_Init</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, bsp_oled.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = OLED_Init &rArr; OLED_I2C_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>OLED_Pow</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_oled.o(i.OLED_Pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_Pow
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
</UL>

<P><STRONG><a name="[f4]"></a>OLED_SetCursor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bsp_oled.o(i.OLED_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum_Bright
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowBmpMini
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowBMP
</UL>

<P><STRONG><a name="[f1]"></a>OLED_ShowBMP</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bsp_oled.o(i.OLED_ShowBMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_ShowBMP &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_logo
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitShutDowm_Mode
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_EnterShutDowm_Mode
</UL>

<P><STRONG><a name="[f9]"></a>OLED_ShowBmpMini</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, bsp_oled.o(i.OLED_ShowBmpMini))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_ShowBmpMini &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowProgressBar
</UL>

<P><STRONG><a name="[9d]"></a>OLED_ShowChar</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, bsp_oled.o(i.OLED_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Voltage
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Power
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_InPut_Voltage
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Current
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRestrict
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPredefined
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Subtract
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_EnterSetting
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Add
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Wait
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Vol
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Power
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuShow_Wait
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuShow_Vol
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuShow_Versions
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuShow_Power
</UL>

<P><STRONG><a name="[a1]"></a>OLED_ShowChinese</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, bsp_oled.o(i.OLED_ShowChinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_ShowChinese &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_InPut_Voltage
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Short_Circuit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_MaxPower
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPredefined
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Subtract
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_ON_OFF_OutPut
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_EnterSetting
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_EnterPredefined
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_EnterMenu
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Add
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Wait
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Vol
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Power
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuShow_Wait
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuShow_Vol
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuShow_Versions
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuShow_Power
</UL>

<P><STRONG><a name="[9c]"></a>OLED_ShowNum</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, bsp_oled.o(i.OLED_ShowNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Pow
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Voltage
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Power
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_InPut_Voltage
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Current
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRestrict
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPredefined
</UL>

<P><STRONG><a name="[fb]"></a>OLED_ShowNum_Bright</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, bsp_oled.o(i.OLED_ShowNum_Bright))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_ShowNum_Bright &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRestrict_Vol
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRestrict_Cur
</UL>

<P><STRONG><a name="[a2]"></a>OLED_ShowString</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, bsp_oled.o(i.OLED_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_logo
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_UI
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_State
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_InPut_Voltage
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowProgressBar
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Short_Circuit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_MaxPower
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRestrict
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPredefined
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitShutDowm_Mode
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitExtinguish_Mode
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitSetting
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitPredefined_NoSet
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitPredefined
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitMenu
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_PredefinedTimeOut
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_ON_OFF_OutPut
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_MenuTimeOut
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_MenuOption_Subtract
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_MenuOption_Right
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_MenuOption_Left
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_MenuOption_Add
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_EnterPredefined
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_EnterMenu
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Wait
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Vol
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Power
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuShow_Wait
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuShow_Vol
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuShow_Versions
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuShow_Power
</UL>

<P><STRONG><a name="[f8]"></a>OLED_WriteCommand</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, bsp_oled.o(i.OLED_WriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TimeoutEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
</UL>

<P><STRONG><a name="[f5]"></a>OLED_WriteData</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, bsp_oled.o(i.OLED_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_WriteData &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TimeoutEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum_Bright
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowBmpMini
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowBMP
</UL>

<P><STRONG><a name="[28]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>PowerSupply_Extinguish</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mian.o(i.PowerSupply_Extinguish))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PowerSupply_Extinguish &rArr; Short_Circuit_Detection &rArr; Detection_Current &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Circuit_Detection
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput_Detection
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputFSM_Run
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe]"></a>PowerSupply_Runing</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mian.o(i.PowerSupply_Runing))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PowerSupply_Runing &rArr; Short_Circuit_Detection &rArr; Detection_Current &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_UI
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_State
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Circuit_Detection
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput_Detection
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputFSM_Run
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_PDPowerSupplyState
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Voltage
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Power
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Current
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>PowerSupply_ShutDown</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mian.o(i.PowerSupply_ShutDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PowerSupply_ShutDown &rArr; KeyInput_Detection &rArr; Key_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput_Detection
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputFSM_Run
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Mode_Config
</UL>

<P><STRONG><a name="[77]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_DMA_Config
</UL>

<P><STRONG><a name="[ba]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Mode_Config
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clock_Control
</UL>

<P><STRONG><a name="[7b]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GPIO_Config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIQ02FVS3_KEY_GPIO_Config
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIQ02FVS3_EXTI_Config
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_GPIO_Config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_Mode_Config
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_GPIO_Config
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_Mode_Config
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_GPIO_Config
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Init
</UL>

<P><STRONG><a name="[d3]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_CleanFlag
</UL>

<P><STRONG><a name="[cf]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[d2]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_GetFlag
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_CleanFlag
</UL>

<P><STRONG><a name="[103]"></a>Read_CurRestrict_FromRom</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, keyinputfsm.o(i.Read_CurRestrict_FromRom))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Read_CurRestrict_FromRom &rArr; I2C_EE_BufferRead &rArr; I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Reserve_VolAndCur
</UL>

<P><STRONG><a name="[92]"></a>Read_SettingField</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, keyinputfsm.o(i.Read_SettingField))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Read_SettingField &rArr; I2C_EE_BufferRead &rArr; I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Setting
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Wait
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Vol
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Power
</UL>

<P><STRONG><a name="[104]"></a>Read_VolRestrict_FromRom</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, keyinputfsm.o(i.Read_VolRestrict_FromRom))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Read_VolRestrict_FromRom &rArr; I2C_EE_BufferRead &rArr; I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Reserve_VolAndCur
</UL>

<P><STRONG><a name="[e6]"></a>SC8701_CE_Control</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_sc8701.o(i.SC8701_CE_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SC8701_CE_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Circuit_Protection
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_EnterShutDowm_Mode
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Subtract
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitPredefined
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_ON_OFF_OutPut
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Add
</UL>

<P><STRONG><a name="[b0]"></a>SC8701_CE_Read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_sc8701.o(i.SC8701_CE_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SC8701_CE_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Voltage
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Subtract
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Add
</UL>

<P><STRONG><a name="[107]"></a>SC8701_FB_Control</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_sc8701.o(i.SC8701_FB_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SC8701_FB_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage
</UL>

<P><STRONG><a name="[108]"></a>SC8701_FB_Read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_sc8701.o(i.SC8701_FB_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SC8701_FB_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage
</UL>

<P><STRONG><a name="[109]"></a>SC8701_GPIO_Config</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, bsp_sc8701.o(i.SC8701_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SC8701_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Init
</UL>

<P><STRONG><a name="[10a]"></a>SC8701_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_sc8701.o(i.SC8701_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SC8701_Init &rArr; ADVANCE_TIM_Mode_Config &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_GPIO_Config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_Mode_Config
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>SC8701_Set_Current</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, bsp_sc8701.o(i.SC8701_Set_Current))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SC8701_Set_Current &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Reserve_VolAndCur
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Subtract
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitPredefined
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_ON_OFF_OutPut
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Add
</UL>

<P><STRONG><a name="[e7]"></a>SC8701_Set_Voltage</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, bsp_sc8701.o(i.SC8701_Set_Voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SC8701_Set_Voltage &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_FB_Read
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_FB_Control
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_CE_Read
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_CE_Control
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage_Slow
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Vol_UpperLimit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Reserve_VolAndCur
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Subtract
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitPredefined
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_ON_OFF_OutPut
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Add
</UL>

<P><STRONG><a name="[e9]"></a>SC8701_Set_Voltage_Slow</STRONG> (Thumb, 338 bytes, Stack size 72 bytes, bsp_sc8701.o(i.SC8701_Set_Voltage_Slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SC8701_Set_Voltage_Slow &rArr; ShowProgressBar &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowProgressBar
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Subtract
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitPredefined
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_ON_OFF_OutPut
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Add
</UL>

<P><STRONG><a name="[113]"></a>SIQ02FVS3_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_siq02fvs3.o(i.SIQ02FVS3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SIQ02FVS3_Init &rArr; SIQ02FVS3_KEY_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIQ02FVS3_KEY_GPIO_Config
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIQ02FVS3_NVIC_Config
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIQ02FVS3_EXTI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>SIQ02FVS3_KEY_GPIO_Config</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, bsp_siq02fvs3.o(i.SIQ02FVS3_KEY_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SIQ02FVS3_KEY_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIQ02FVS3_Init
</UL>

<P><STRONG><a name="[e0]"></a>SIQ02FVS3_Key_Scan</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_siq02fvs3.o(i.SIQ02FVS3_Key_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SIQ02FVS3_Key_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInput_Detection
</UL>

<P><STRONG><a name="[26]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>Save_CurRestrict_ToRom</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, keyinputfsm.o(i.Save_CurRestrict_ToRom))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Save_CurRestrict_ToRom &rArr; I2C_EE_BufferWrite &rArr; I2C_EE_PageWrite &rArr; I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Reserve_VolAndCur
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Subtract
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitPredefined
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Add
</UL>

<P><STRONG><a name="[ed]"></a>Save_VolRestrict_ToRom</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, keyinputfsm.o(i.Save_VolRestrict_ToRom))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Save_VolRestrict_ToRom &rArr; I2C_EE_BufferWrite &rArr; I2C_EE_PageWrite &rArr; I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Vol_UpperLimit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Reserve_VolAndCur
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Subtract
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitPredefined
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Add
</UL>

<P><STRONG><a name="[ab]"></a>Search_Reserve_VolAndCur</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, task.o(i.Search_Reserve_VolAndCur))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Search_Reserve_VolAndCur &rArr; SC8701_Set_Voltage &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpData_VolRestrictAndCurRestrict
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMax_Current
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_VolRestrict_ToRom
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_CurRestrict_ToRom
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Current
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_VolRestrict_FromRom
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CurRestrict_FromRom
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWrite
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Ergodic_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_InPut_Voltage
</UL>

<P><STRONG><a name="[117]"></a>SetMax_Current</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, keyinputfsm.o(i.SetMax_Current))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetMax_Current
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Reserve_VolAndCur
</UL>

<P><STRONG><a name="[94]"></a>Set_Power_UpperLimit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, keyinputfsm.o(i.Set_Power_UpperLimit))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Setting
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Power
</UL>

<P><STRONG><a name="[9e]"></a>Set_State</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, task.o(i.Set_State))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Voltage
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Power
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Current
</UL>

<P><STRONG><a name="[93]"></a>Set_Vol_UpperLimit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, keyinputfsm.o(i.Set_Vol_UpperLimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Set_Vol_UpperLimit &rArr; SC8701_Set_Voltage &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_VolRestrict_ToRom
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Setting
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Vol
</UL>

<P><STRONG><a name="[fd]"></a>Short_Circuit_Detection</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, task.o(i.Short_Circuit_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Short_Circuit_Detection &rArr; Detection_Current &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_PDPowerSupplyState
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Current
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Circuit_Protection
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Get_Channel_9_Val
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clock_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSupply_Runing
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSupply_Extinguish
</UL>

<P><STRONG><a name="[11a]"></a>Short_Circuit_Protection</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, task.o(i.Short_Circuit_Protection))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Short_Circuit_Protection &rArr; Show_Short_Circuit &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_CE_Control
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Short_Circuit
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Circuit_Detection
</UL>

<P><STRONG><a name="[f0]"></a>ShowPredefined</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, keyinputfsm.o(i.ShowPredefined))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ShowPredefined &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Predefined_Subtract
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Predefined_Add
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_EnterPredefined
</UL>

<P><STRONG><a name="[10f]"></a>ShowProgressBar</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, bsp_sc8701.o(i.ShowProgressBar))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ShowProgressBar &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowBmpMini
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage_Slow
</UL>

<P><STRONG><a name="[ea]"></a>ShowRestrict</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, keyinputfsm.o(i.ShowRestrict))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ShowRestrict &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Subtract
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_RightMove
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_LeftMove
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_EnterSetting
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Change_Vol_Or_Cur
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Add
</UL>

<P><STRONG><a name="[ec]"></a>ShowRestrict_Cur</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, keyinputfsm.o(i.ShowRestrict_Cur))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ShowRestrict_Cur &rArr; OLED_ShowNum_Bright &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum_Bright
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Subtract
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_RightMove
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_LeftMove
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Change_Vol_Or_Cur
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Add
</UL>

<P><STRONG><a name="[eb]"></a>ShowRestrict_Vol</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, keyinputfsm.o(i.ShowRestrict_Vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ShowRestrict_Vol &rArr; OLED_ShowNum_Bright &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowNum_Bright
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Subtract
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_RightMove
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_LeftMove
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_EnterSetting
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Change_Vol_Or_Cur
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_Add
</UL>

<P><STRONG><a name="[aa]"></a>Show_MaxPower</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, task.o(i.Show_MaxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Show_MaxPower &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_InPut_Voltage
</UL>

<P><STRONG><a name="[11b]"></a>Show_Short_Circuit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, task.o(i.Show_Short_Circuit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Show_Short_Circuit &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Short_Circuit_Protection
</UL>

<P><STRONG><a name="[101]"></a>Show_State</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, task.o(i.Show_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Show_State &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSupply_Runing
</UL>

<P><STRONG><a name="[100]"></a>Show_UI</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, task.o(i.Show_UI))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Show_UI &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSupply_Runing
</UL>

<P><STRONG><a name="[11c]"></a>Show_logo</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, task.o(i.Show_logo))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Show_logo &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_GetFlag
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowBMP
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>TIM4_IRQHandler</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM4_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_BDTRConfig))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_Mode_Config
</UL>

<P><STRONG><a name="[bb]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Mode_Config
</UL>

<P><STRONG><a name="[11e]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_Mode_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Mode_Config
</UL>

<P><STRONG><a name="[8e]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_Mode_Config
</UL>

<P><STRONG><a name="[10e]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetCapture1))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage_Slow
</UL>

<P><STRONG><a name="[11d]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Mode_Config
</UL>

<P><STRONG><a name="[88]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_Mode_Config
</UL>

<P><STRONG><a name="[89]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_Mode_Config
</UL>

<P><STRONG><a name="[8a]"></a>TIM_OC4Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_Mode_Config
</UL>

<P><STRONG><a name="[8b]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_Mode_Config
</UL>

<P><STRONG><a name="[10d]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage
</UL>

<P><STRONG><a name="[10b]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare4))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Current
</UL>

<P><STRONG><a name="[87]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADVANCE_TIM_Mode_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Mode_Config
</UL>

<P><STRONG><a name="[122]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[11f]"></a>USART_Config</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, bsp_usart.o(i.USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[121]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[120]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[127]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[116]"></a>UpData_VolRestrictAndCurRestrict</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, keyinputfsm.o(i.UpData_VolRestrictAndCurRestrict))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Reserve_VolAndCur
</UL>

<P><STRONG><a name="[25]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>Voltage_Filter</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, task.o(i.Voltage_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Voltage_Filter &rArr; bubble_sort_integer
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bubble_sort_integer
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Get_Channel_8_Val
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_Voltage
</UL>

<P><STRONG><a name="[e2]"></a>Write_SettingField</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, keyinputfsm.o(i.Write_SettingField))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Write_SettingField &rArr; I2C_EE_BufferWrite &rArr; I2C_EE_PageWrite &rArr; I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWrite
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Wait
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Vol
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Power
</UL>

<P><STRONG><a name="[124]"></a>__0printf$1</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[139]"></a>__1printf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)

<P><STRONG><a name="[d0]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TimeoutEvent
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TIMEOUT_UserCallback
</UL>

<P><STRONG><a name="[13a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[13b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[13c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[db]"></a>bubble_sort</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, task.o(i.bubble_sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bubble_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InPut_Voltage_Filter
</UL>

<P><STRONG><a name="[99]"></a>bubble_sort_integer</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, task.o(i.bubble_sort_integer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bubble_sort_integer
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Filter
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Filter
</UL>

<P><STRONG><a name="[58]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0printf$1)
</UL>
<P><STRONG><a name="[55]"></a>main</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, mian.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; Detection_InPut_Voltage &rArr; InPut_Voltage_Filter &rArr; ADC1_Get_Channel_7_Voltaged &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_logo
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_UI
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIQ02FVS3_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GPIO_Config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_PDPowerSupplyState
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_InPut_Voltage
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Setting
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_x_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSupply_ShutDown
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSupply_Runing
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSupply_Extinguish
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[118]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[119]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[d1]"></a>I2C_TimeoutEvent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_oled.o(i.I2C_TimeoutEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
</UL>

<P><STRONG><a name="[74]"></a>ADCx_GPIO_Config</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, bsp_adc.o(i.ADCx_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADCx_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_x_Init
</UL>

<P><STRONG><a name="[76]"></a>ADCx_Mode_Config</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, bsp_adc.o(i.ADCx_Mode_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ADCx_Mode_Config &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_x_Init
</UL>

<P><STRONG><a name="[b9]"></a>GENERAL_TIM_Mode_Config</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bsp_generaltim.o(i.GENERAL_TIM_Mode_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GENERAL_TIM_Mode_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Init
</UL>

<P><STRONG><a name="[b8]"></a>GENERAL_TIM_NVIC_Config</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_generaltim.o(i.GENERAL_TIM_NVIC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GENERAL_TIM_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERAL_TIM_Init
</UL>

<P><STRONG><a name="[85]"></a>ADVANCE_TIM_GPIO_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_sc8701.o(i.ADVANCE_TIM_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADVANCE_TIM_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Init
</UL>

<P><STRONG><a name="[86]"></a>ADVANCE_TIM_Mode_Config</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, bsp_sc8701.o(i.ADVANCE_TIM_Mode_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADVANCE_TIM_Mode_Config &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_BDTRConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Init
</UL>

<P><STRONG><a name="[110]"></a>SIQ02FVS3_EXTI_Config</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_siq02fvs3.o(i.SIQ02FVS3_EXTI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SIQ02FVS3_EXTI_Config &rArr; GPIO_EXTILineConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIQ02FVS3_Init
</UL>

<P><STRONG><a name="[115]"></a>SIQ02FVS3_NVIC_Config</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_siq02fvs3.o(i.SIQ02FVS3_NVIC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SIQ02FVS3_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIQ02FVS3_Init
</UL>

<P><STRONG><a name="[3]"></a>MenuShow_Power</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, keyinputfsm.o(i.MenuShow_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MenuShow_Power &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>MenuShow_Versions</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, keyinputfsm.o(i.MenuShow_Versions))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MenuShow_Versions &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>MenuShow_Vol</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, keyinputfsm.o(i.MenuShow_Vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MenuShow_Vol &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Vol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>MenuShow_Wait</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, keyinputfsm.o(i.MenuShow_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MenuShow_Wait &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[e1]"></a>Menu_Set_Power</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, keyinputfsm.o(i.Menu_Set_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Menu_Set_Power &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Power_UpperLimit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SettingField
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SettingField
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_MenuOption_Subtract
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_MenuOption_Right
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_MenuOption_Left
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_MenuOption_Add
</UL>

<P><STRONG><a name="[e3]"></a>Menu_Set_Vol</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, keyinputfsm.o(i.Menu_Set_Vol))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Menu_Set_Vol &rArr; Set_Vol_UpperLimit &rArr; SC8701_Set_Voltage &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Vol_UpperLimit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SettingField
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SettingField
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuShow_Vol
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_MenuOption_Subtract
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_MenuOption_Right
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_MenuOption_Left
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_MenuOption_Add
</UL>

<P><STRONG><a name="[e4]"></a>Menu_Set_Wait</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, keyinputfsm.o(i.Menu_Set_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Menu_Set_Wait &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SettingField
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SettingField
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_MenuOption_Subtract
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_MenuOption_Right
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_MenuOption_Left
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_MenuOption_Add
</UL>

<P><STRONG><a name="[c]"></a>Node_Add</STRONG> (Thumb, 634 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Node_Add &rArr; SC8701_Set_Voltage_Slow &rArr; ShowProgressBar &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage_Slow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_VolRestrict_ToRom
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_CurRestrict_ToRom
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Current
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_CE_Read
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_CE_Control
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRestrict_Vol
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRestrict_Cur
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRestrict
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Power
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>Node_Change_Vol_Or_Cur</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_Change_Vol_Or_Cur))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Node_Change_Vol_Or_Cur &rArr; ShowRestrict &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRestrict_Vol
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRestrict_Cur
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRestrict
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>Node_EnterMenu</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_EnterMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Node_EnterMenu &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputFSM_SetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>Node_EnterPredefined</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_EnterPredefined))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Node_EnterPredefined &rArr; ShowPredefined &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPredefined
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputFSM_SetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>Node_EnterSetting</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_EnterSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Node_EnterSetting &rArr; ShowRestrict &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRestrict_Vol
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRestrict
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputFSM_SetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>Node_LeftMove</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_LeftMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Node_LeftMove &rArr; ShowRestrict &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRestrict_Vol
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRestrict_Cur
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRestrict
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>Node_MenuOption_Add</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_MenuOption_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Node_MenuOption_Add &rArr; Menu_Set_Vol &rArr; Set_Vol_UpperLimit &rArr; SC8701_Set_Voltage &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Wait
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Vol
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Power
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>Node_MenuOption_Left</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_MenuOption_Left))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Node_MenuOption_Left &rArr; Menu_Set_Vol &rArr; Set_Vol_UpperLimit &rArr; SC8701_Set_Voltage &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Wait
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Vol
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Power
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>Node_MenuOption_Right</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_MenuOption_Right))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Node_MenuOption_Right &rArr; Menu_Set_Vol &rArr; Set_Vol_UpperLimit &rArr; SC8701_Set_Voltage &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Wait
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Vol
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Power
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>Node_MenuOption_Subtract</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_MenuOption_Subtract))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Node_MenuOption_Subtract &rArr; Menu_Set_Vol &rArr; Set_Vol_UpperLimit &rArr; SC8701_Set_Voltage &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Wait
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Vol
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Set_Power
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>Node_MenuTimeOut</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_MenuTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Node_MenuTimeOut &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputFSM_SetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>Node_ON_OFF_OutPut</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_ON_OFF_OutPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Node_ON_OFF_OutPut &rArr; SC8701_Set_Voltage_Slow &rArr; ShowProgressBar &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage_Slow
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Current
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_CE_Control
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>Node_PredefinedTimeOut</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_PredefinedTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Node_PredefinedTimeOut &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputFSM_SetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>Node_Predefined_Add</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_Predefined_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Node_Predefined_Add &rArr; ShowPredefined &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPredefined
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>Node_Predefined_Subtract</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_Predefined_Subtract))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Node_Predefined_Subtract &rArr; ShowPredefined &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPredefined
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>Node_QuitMenu</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_QuitMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Node_QuitMenu &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputFSM_SetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>Node_QuitPredefined</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_QuitPredefined))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Node_QuitPredefined &rArr; SC8701_Set_Voltage_Slow &rArr; ShowProgressBar &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage_Slow
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_VolRestrict_ToRom
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_CurRestrict_ToRom
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Current
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_CE_Control
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputFSM_SetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>Node_QuitPredefined_NoSet</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_QuitPredefined_NoSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Node_QuitPredefined_NoSet &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputFSM_SetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>Node_QuitSetting</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_QuitSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Node_QuitSetting &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputFSM_SetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_SettingTimeOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>Node_Ready</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, keyinputfsm.o(i.Node_Ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Node_Ready
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputFSM_SetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>Node_RightMove</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_RightMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Node_RightMove &rArr; ShowRestrict &rArr; OLED_ShowNum &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRestrict_Vol
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRestrict_Cur
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRestrict
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>Node_RunningTimeOut</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_RunningTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Node_RunningTimeOut &rArr; OLED_Clear &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clock_Control
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInputFSM_SetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>Node_SettingTimeOut</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_SettingTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Node_SettingTimeOut &rArr; Node_QuitSetting &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Node_QuitSetting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>Node_Subtract</STRONG> (Thumb, 494 bytes, Stack size 8 bytes, keyinputfsm.o(i.Node_Subtract))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Node_Subtract &rArr; SC8701_Set_Voltage_Slow &rArr; ShowProgressBar &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; I2C_TimeoutEvent &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage_Slow
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_VolRestrict_ToRom
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_CurRestrict_ToRom
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Voltage
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_Set_Current
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_CE_Read
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC8701_CE_Control
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRestrict_Vol
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRestrict_Cur
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowRestrict
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>Node_Void</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keyinputfsm.o(i.Node_Void))
<BR>[Address Reference Count : 1]<UL><LI> keyinputfsm.o(.data)
</UL>
<P><STRONG><a name="[bf]"></a>I2C_TIMEOUT_UserCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_i2c_ee.o(i.I2C_TIMEOUT_UserCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
</UL>

<P><STRONG><a name="[125]"></a>_printf_core</STRONG> (Thumb, 336 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$1
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
